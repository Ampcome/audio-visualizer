{"version":3,"file":"index.js","sources":["../src/components/AudioVisualizer.tsx","../src/shaders/vertexShader.ts","../src/shaders/fragmentShader.ts","../src/hooks/useAudioListener.ts"],"sourcesContent":["import { useRef, useEffect, useState, useMemo, JSX } from \"react\";\r\n// three.js\r\nimport { GUI } from \"dat.gui\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer.js\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass.js\";\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass.js\";\r\nimport { OutputPass } from \"three/examples/jsm/postprocessing/OutputPass.js\";\r\n// Shaders\r\nimport vertexShader from \"../shaders/vertexShader\";\r\nimport fragmentShader from \"../shaders/fragmentShader\";\r\n// Types\r\nimport {\r\n  VisualizerProps,\r\n  ShaderUniforms,\r\n  BloomParams,\r\n} from \"../types\";\r\n\r\n/**\r\n * AudioVisualizer component that renders a 3D visualization of audio data\r\n * @param props Component props\r\n * @returns JSX.Element\r\n */\r\nexport const AudioVisualizer = ({\r\n  audioData,\r\n  isListening,\r\n  initialQuality = \"medium\",\r\n  orbColors,\r\n  canvasColor = 0x000000,\r\n  initialGlow,\r\n  // showStats = false,\r\n  enableOrbitControls = true,\r\n  autoRotate = false,\r\n  showGui = false,\r\n  guiPositionTop = 100,\r\n  inertiaEnabled = true,\r\n  inertiaLevel = 0.05,\r\n  zoomEnabled = false,\r\n  spikeLevel = 5.5,\r\n  smoothnessLevel = 0.7,\r\n  className = \"\",\r\n  containerStyle = {},\r\n}: VisualizerProps): JSX.Element => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\r\n  const meshRef = useRef<THREE.Mesh | null>(null);\r\n  const sceneRef = useRef<THREE.Scene | null>(null);\r\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\r\n  const clockRef = useRef<THREE.Clock | null>(null);\r\n  const composerRef = useRef<EffectComposer | null>(null);\r\n  const bloomPassRef = useRef<UnrealBloomPass | null>(null);\r\n  const guiRef = useRef<GUI | null>(null);\r\n  const animationFrameRef = useRef<number | null>(null);\r\n  const lastFrameTimeRef = useRef<number>(0);\r\n  const fpsHistoryRef = useRef<number[]>([]);\r\n\r\n  // Mouse position state for camera movement\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\r\n\r\n  // Performance monitoring\r\n  const [fps, setFps] = useState<number>(0);\r\n  const [quality, setQuality] = useState<\"low\" | \"medium\" | \"high\">(\r\n    initialQuality\r\n  );\r\n\r\n  // Detect device capabilities\r\n  const deviceCapabilities = useMemo(() => {\r\n    if (typeof window === \"undefined\") {\r\n      return {\r\n        isMobile: false,\r\n        isLowEndDevice: false,\r\n        initialQuality: initialQuality,\r\n      };\r\n    }\r\n\r\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n    const isLowEndDevice =\r\n      isMobile || (window.navigator.hardwareConcurrency || 4) <= 4;\r\n    return {\r\n      isMobile,\r\n      isLowEndDevice,\r\n      initialQuality: isLowEndDevice\r\n        ? (\"low\" as const)\r\n        : (initialQuality as \"low\" | \"medium\" | \"high\"),\r\n    };\r\n  }, [initialQuality]);\r\n\r\n  // Helper function to parse various color formats to THREE.Color\r\n  const parseColor = (\r\n    color: number | string | { r: number; g: number; b: number }\r\n  ): THREE.Color => {\r\n    if (typeof color === \"number\") {\r\n      return new THREE.Color(color);\r\n    } else if (typeof color === \"string\") {\r\n      return new THREE.Color(color);\r\n    } else if (\r\n      color &&\r\n      typeof color === \"object\" &&\r\n      \"r\" in color &&\r\n      \"g\" in color &&\r\n      \"b\" in color\r\n    ) {\r\n      return new THREE.Color(color.r / 255, color.g / 255, color.b / 255);\r\n    }\r\n    // Default fallback\r\n    return new THREE.Color(0x000000);\r\n  };\r\n\r\n  // Helper function to convert color to CSS string\r\n  const colorToCssString = (\r\n    color: number | string | { r: number; g: number; b: number }\r\n  ): string => {\r\n    if (typeof color === \"number\") {\r\n      return `#${color.toString(16).padStart(6, \"0\")}`;\r\n    } else if (typeof color === \"string\") {\r\n      // If it's already a valid CSS color, return it\r\n      if (\r\n        color.startsWith(\"#\") ||\r\n        color.startsWith(\"rgb\") ||\r\n        /^[a-z]+$/i.test(color)\r\n      ) {\r\n        return color;\r\n      }\r\n      // Try to convert hex string without # to proper format\r\n      if (/^[0-9A-F]{6}$/i.test(color)) {\r\n        return `#${color}`;\r\n      }\r\n      // Fallback\r\n      return \"#000000\";\r\n    } else if (\r\n      color &&\r\n      typeof color === \"object\" &&\r\n      \"r\" in color &&\r\n      \"g\" in color &&\r\n      \"b\" in color\r\n    ) {\r\n      return `rgb(${color.r}, ${color.g}, ${color.b})`;\r\n    }\r\n    // Default fallback\r\n    return \"#000000\";\r\n  };\r\n\r\n  // Set initial quality based on device capabilities\r\n  useEffect(() => {\r\n    setQuality(deviceCapabilities.initialQuality);\r\n  }, [deviceCapabilities.initialQuality]);\r\n\r\n  // Update detail level based on quality setting\r\n  const getDetailLevel = (qualitySetting: string): number => {\r\n    switch (qualitySetting) {\r\n      case \"low\":\r\n        return 0.8;\r\n      case \"high\":\r\n        return 2.0;\r\n      default:\r\n        return 1.2; // medium\r\n    }\r\n  };\r\n\r\n  // Shader uniforms with memoization to prevent unnecessary updates\r\n  const uniformsRef = useRef<ShaderUniforms>({\r\n    u_time: { value: 0.0 },\r\n    u_amplitude: { value: 1.5 },\r\n    u_bass: { value: 0.5 },\r\n    u_mid: { value: 0.5 },\r\n    u_treble: { value: 0.5 },\r\n    u_red: { value: orbColors?.red ? orbColors?.red / 255 : 1.0 },\r\n    u_green: { value: orbColors?.green ? orbColors?.green / 255 : 1.0 },\r\n    u_blue: { value: orbColors?.blue ? orbColors?.blue / 255 : 1.0 },\r\n    u_detail: { value: getDetailLevel(quality) }, // Control noise detail level\r\n  });\r\n\r\n  // Bloom parameters with default values\r\n  const bloomParamsRef = useRef<BloomParams>({\r\n    threshold: initialGlow?.threshold ?? 0.5,\r\n    strength: initialGlow?.strength ?? 0.2,\r\n    radius: initialGlow?.radius ?? 0.5,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    // Set detail level in uniforms\r\n    uniformsRef.current.u_detail.value = getDetailLevel(quality);\r\n\r\n    // Create scene\r\n    const scene = new THREE.Scene();\r\n    scene.background = parseColor(canvasColor);\r\n    sceneRef.current = scene;\r\n\r\n    // Create clock for animation\r\n    const clock = new THREE.Clock();\r\n    clockRef.current = clock;\r\n\r\n    // Create camera\r\n    const camera = new THREE.PerspectiveCamera(\r\n      45,\r\n      containerRef.current?.clientWidth / containerRef.current?.clientHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.set(0, -2, 14);\r\n    camera.lookAt(0, 0, 0);\r\n    cameraRef.current = camera;\r\n\r\n    // Create renderer with optimized settings\r\n    try {\r\n      const renderer = new THREE.WebGLRenderer({\r\n        antialias: true, // Keep antialiasing for visual quality\r\n        alpha: true,\r\n        powerPreference: \"high-performance\",\r\n        precision: quality === \"low\" ? \"mediump\" : \"highp\",\r\n      });\r\n      renderer.setSize(\r\n        containerRef.current?.clientWidth,\r\n        containerRef.current?.clientHeight\r\n      );\r\n\r\n      // Use adaptive pixel ratio based on device capabilities\r\n      const getOptimalPixelRatio = () => {\r\n        const baseRatio = window.devicePixelRatio || 1;\r\n        if (deviceCapabilities.isLowEndDevice) return Math.min(baseRatio, 1);\r\n        if (quality === \"low\") return Math.min(baseRatio, 1.5);\r\n        if (quality === \"medium\") return Math.min(baseRatio, 2);\r\n        return baseRatio; // For high quality, use native ratio\r\n      };\r\n\r\n      renderer.setPixelRatio(getOptimalPixelRatio());\r\n      renderer.setClearColor(parseColor(canvasColor).getHex(), 1);\r\n      renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n\r\n      // Clear any existing canvas\r\n      if (containerRef.current.firstChild) {\r\n        containerRef.current.removeChild(containerRef.current.firstChild);\r\n      }\r\n\r\n      containerRef.current.appendChild(renderer.domElement);\r\n      rendererRef.current = renderer;\r\n\r\n      // Add OrbitControls if enabled\r\n      if (enableOrbitControls) {\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = inertiaEnabled;\r\n        controls.dampingFactor = inertiaLevel;\r\n        controls.enableZoom = zoomEnabled;\r\n        controls.autoRotate = autoRotate;\r\n        controls.update();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating WebGL renderer:\", error);\r\n    }\r\n\r\n    // Material with enhanced shaders for more robust animation\r\n    const material = new THREE.ShaderMaterial({\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n      wireframe: true,\r\n      uniforms: uniformsRef.current,\r\n    });\r\n\r\n    // Create geometry with much higher detail to match original visualizer\r\n    // Using adaptive detail levels based on device capabilities\r\n    const getSubdivisions = (qualitySetting: string): number => {\r\n      switch (qualitySetting) {\r\n        case \"low\":\r\n          return 20; // Higher detail but still optimized for low-end devices\r\n        case \"high\":\r\n          return 40; // Match original visualizer's detail level\r\n        default:\r\n          return 30; // Good balance for medium quality\r\n      }\r\n    };\r\n\r\n    const subdivisions = getSubdivisions(quality);\r\n\r\n    // Create geometry with higher detail level\r\n    // Use buffer geometry for better performance with high vertex counts\r\n    const geometry = new THREE.IcosahedronGeometry(\r\n      4,\r\n      Math.min(subdivisions, 30)\r\n    );\r\n\r\n    // Apply geometry optimization techniques for better performance\r\n    if (geometry.index) {\r\n      geometry.index.needsUpdate = true;\r\n    }\r\n    geometry.attributes.position.needsUpdate = true;\r\n    geometry.attributes.normal.needsUpdate = true;\r\n\r\n    // Create mesh\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    scene.add(mesh);\r\n    meshRef.current = mesh;\r\n\r\n    // Create render pass\r\n    const renderScene = new RenderPass(sceneRef.current, cameraRef.current);\r\n\r\n    // Create bloom pass with adaptive settings based on quality\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(\r\n        containerRef.current?.clientWidth,\r\n        containerRef.current?.clientHeight\r\n      ),\r\n      bloomParamsRef.current.strength,\r\n      bloomParamsRef.current.radius,\r\n      bloomParamsRef.current.threshold\r\n    );\r\n    bloomPassRef.current = bloomPass;\r\n\r\n    // Create output pass\r\n    const outputPass = new OutputPass();\r\n\r\n    // Create effect composer with the renderer instance\r\n    // TypeScript safety check to ensure renderer is not null\r\n    if (rendererRef.current) {\r\n      const composer = new EffectComposer(rendererRef.current);\r\n      composer.addPass(renderScene);\r\n      composer.addPass(bloomPass);\r\n      composer.addPass(outputPass);\r\n      composer.setSize(\r\n        containerRef.current?.clientWidth,\r\n        containerRef.current?.clientHeight\r\n      );\r\n      composerRef.current = composer;\r\n    }\r\n\r\n    // Add GUI if enabled\r\n    if (showGui) {\r\n      const gui = new GUI();\r\n      gui.domElement.style.position = 'absolute';\r\n      gui.domElement.style.top = `${guiPositionTop}px`;\r\n      gui.domElement.style.right = '0px';\r\n      guiRef.current = gui;\r\n\r\n      // Add color controls\r\n      const colorFolder = gui.addFolder(\"Colors\");\r\n      colorFolder.add(uniformsRef.current.u_red, \"value\", 0, 1).name(\"Red\");\r\n      colorFolder.add(uniformsRef.current.u_green, \"value\", 0, 1).name(\"Green\");\r\n      colorFolder.add(uniformsRef.current.u_blue, \"value\", 0, 1).name(\"Blue\");\r\n      // colorFolder.open();\r\n\r\n      // Add bloom controls\r\n      const bloomFolder = gui.addFolder(\"Bloom\");\r\n      bloomFolder\r\n        .add(bloomParamsRef.current, \"threshold\", 0, 1)\r\n        .name(\"Threshold\")\r\n        .onChange((value: number) => {\r\n          if (bloomPassRef.current) {\r\n            bloomPassRef.current.threshold = value;\r\n          }\r\n        });\r\n      bloomFolder\r\n        .add(bloomParamsRef.current, \"strength\", 0, 3)\r\n        .name(\"Strength\")\r\n        .onChange((value: number) => {\r\n          if (bloomPassRef.current) {\r\n            bloomPassRef.current.strength = value;\r\n          }\r\n        });\r\n      bloomFolder\r\n        .add(bloomParamsRef.current, \"radius\", 0, 1)\r\n        .name(\"Radius\")\r\n        .onChange((value: number) => {\r\n          if (bloomPassRef.current) {\r\n            bloomPassRef.current.radius = value;\r\n          }\r\n        });\r\n      // bloomFolder.open();\r\n\r\n      // Add quality control\r\n      const settingsFolder = gui.addFolder(\"Settings\");\r\n      settingsFolder\r\n        .add({ quality }, \"quality\", [\"low\", \"medium\", \"high\"])\r\n        .name(\"Quality\")\r\n        .onChange((value: \"low\" | \"medium\" | \"high\") => {\r\n          setQuality(value);\r\n        });\r\n      // settingsFolder.open();\r\n    }\r\n\r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      if (!containerRef.current || !rendererRef.current || !cameraRef.current)\r\n        return;\r\n\r\n      const width = containerRef.current.clientWidth;\r\n      const height = containerRef.current.clientHeight;\r\n\r\n      cameraRef.current.aspect = width / height;\r\n      cameraRef.current.updateProjectionMatrix();\r\n\r\n      rendererRef.current.setSize(width, height);\r\n\r\n      if (composerRef.current) {\r\n        composerRef.current.setSize(width, height);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n        animationFrameRef.current = null;\r\n      }\r\n\r\n      if (rendererRef.current && containerRef.current) {\r\n        containerRef.current.removeChild(rendererRef.current.domElement);\r\n      }\r\n\r\n      if (meshRef.current) {\r\n        meshRef.current.geometry.dispose();\r\n        (meshRef.current.material as THREE.Material).dispose();\r\n      }\r\n\r\n      if (guiRef.current) guiRef.current.destroy();\r\n    };\r\n  }, [\r\n    containerRef.current?.clientWidth,\r\n    containerRef.current?.clientHeight,\r\n    quality,\r\n    deviceCapabilities.isLowEndDevice,\r\n    enableOrbitControls,\r\n    autoRotate,\r\n    showGui,\r\n    inertiaEnabled,\r\n    inertiaLevel,\r\n    zoomEnabled,\r\n  ]);\r\n\r\n  // Handle mouse movement for camera control\r\n  useEffect(() => {\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const windowHalfX = window.innerWidth / 2;\r\n      const windowHalfY = window.innerHeight / 2;\r\n\r\n      setMousePosition({\r\n        x: (e.clientX - windowHalfX) / 100,\r\n        y: (e.clientY - windowHalfY) / 100,\r\n      });\r\n    };\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n    };\r\n  }, []);\r\n\r\n  // Animation loop with frame limiting and adaptive quality\r\n  useEffect(() => {\r\n    if (\r\n      !sceneRef.current ||\r\n      !cameraRef.current ||\r\n      !clockRef.current ||\r\n      !rendererRef.current ||\r\n      !meshRef.current\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Target frame rate based on quality setting\r\n    const getTargetFPS = (qualitySetting: string): number => {\r\n      switch (qualitySetting) {\r\n        case \"low\":\r\n          return 30;\r\n        case \"high\":\r\n          return 60;\r\n        default:\r\n          return 45; // medium\r\n      }\r\n    };\r\n\r\n    const targetFPS = getTargetFPS(quality);\r\n    const frameInterval = 1000 / targetFPS;\r\n\r\n    const animate = (): void => {\r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n\r\n      if (\r\n        !cameraRef.current ||\r\n        !sceneRef.current ||\r\n        !clockRef.current ||\r\n        !rendererRef.current ||\r\n        !uniformsRef.current ||\r\n        !meshRef.current\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // Frame rate limiting for consistent performance\r\n      const currentTime = performance.now();\r\n      const deltaTime = currentTime - lastFrameTimeRef.current;\r\n\r\n      if (deltaTime < frameInterval) {\r\n        return; // Skip this frame to maintain target FPS\r\n      }\r\n\r\n      // Calculate FPS for stats display\r\n      // if (showStats) {\r\n      //   const fps = 1000 / deltaTime;\r\n      //   fpsHistoryRef.current.push(fps);\r\n      //   if (fpsHistoryRef.current.length > 30) {\r\n      //     fpsHistoryRef.current.shift();\r\n      //   }\r\n\r\n      //   // Update FPS display every 10 frames\r\n      //   if (fpsHistoryRef.current.length % 10 === 0) {\r\n      //     const avgFps =\r\n      //       fpsHistoryRef.current.reduce((sum, val) => sum + val, 0) /\r\n      //       fpsHistoryRef.current.length;\r\n      //     setFps(Math.round(avgFps));\r\n      //   }\r\n      // }\r\n\r\n      // Camera follows mouse with smooth easing\r\n      cameraRef.current.position.x +=\r\n        (mousePosition.x - cameraRef.current.position.x) * 0.05;\r\n      cameraRef.current.position.y +=\r\n        (-mousePosition.y - cameraRef.current.position.y) * 0.5;\r\n      cameraRef.current.lookAt(sceneRef.current.position);\r\n\r\n      // Update time uniform\r\n      uniformsRef.current.u_time.value = clockRef.current.getElapsedTime();\r\n\r\n      try {\r\n        if (audioData && isListening && audioData.length > 0) {\r\n          // Audio reactive animation\r\n          try {\r\n            const bufferLength = audioData.length;\r\n\r\n            // Calculate frequency bands with reduced processing\r\n            // Process fewer samples for better performance\r\n            const sampleStep = Math.max(1, Math.floor(bufferLength / 64));\r\n\r\n            // Bass frequencies (low end)\r\n            const bassEnd = Math.floor(bufferLength * 0.1);\r\n            let bassSum = 0;\r\n            for (let i = 0; i < bassEnd; i += sampleStep) {\r\n              bassSum += audioData[i] || 0;\r\n            }\r\n            const bassAvg = bassSum / Math.ceil(bassEnd / sampleStep) || 0;\r\n\r\n            // Mid frequencies\r\n            const midStart = bassEnd;\r\n            const midEnd = Math.floor(bufferLength * 0.5);\r\n            let midSum = 0;\r\n            for (let i = midStart; i < midEnd; i += sampleStep) {\r\n              midSum += audioData[i] || 0;\r\n            }\r\n            const midAvg =\r\n              midSum / Math.ceil((midEnd - midStart) / sampleStep) || 0;\r\n\r\n            // Treble frequencies (high end)\r\n            const trebleStart = midEnd;\r\n            let trebleSum = 0;\r\n            for (let i = trebleStart; i < bufferLength; i += sampleStep) {\r\n              trebleSum += audioData[i] || 0;\r\n            }\r\n            const trebleAvg =\r\n              trebleSum /\r\n                Math.ceil((bufferLength - trebleStart) / sampleStep) || 0;\r\n\r\n            // Apply audio data to uniforms with high multipliers for visible effect\r\n            uniformsRef.current.u_bass.value =\r\n              uniformsRef.current.u_bass.value * (1 - smoothnessLevel) +\r\n              (bassAvg / 255) * spikeLevel * smoothnessLevel;\r\n\r\n            uniformsRef.current.u_mid.value =\r\n              uniformsRef.current.u_mid.value * (1 - smoothnessLevel) +\r\n              (midAvg / 255) * spikeLevel * smoothnessLevel;\r\n\r\n            uniformsRef.current.u_treble.value =\r\n              uniformsRef.current.u_treble.value * (1 - smoothnessLevel) +\r\n              (trebleAvg / 255) * spikeLevel * smoothnessLevel;\r\n\r\n            // Overall amplitude based on average volume\r\n            const avgVolume = (bassAvg + midAvg + trebleAvg) / 3;\r\n            uniformsRef.current.u_amplitude.value =\r\n              uniformsRef.current.u_amplitude.value * (1 - smoothnessLevel) +\r\n              (0.5 + (avgVolume / 255) * spikeLevel) * smoothnessLevel;\r\n          } catch (error) {\r\n            console.error(\"Error in animation loop:\", error);\r\n            // Fall back to gentle animation on error\r\n            const time = clockRef.current.getElapsedTime();\r\n            uniformsRef.current.u_amplitude.value =\r\n              1.0 + Math.sin(time * 0.2) * 0.3;\r\n          }\r\n        } else {\r\n          // Idle animation with subtle movement\r\n          uniformsRef.current.u_amplitude.value = 0;\r\n          uniformsRef.current.u_bass.value = 0;\r\n          uniformsRef.current.u_mid.value = 0;\r\n          uniformsRef.current.u_treble.value = 0;\r\n\r\n          // Apply gentle rotation during idle state\r\n          if (meshRef.current) {\r\n            meshRef.current.rotation.y += 0.001;\r\n          }\r\n        }\r\n\r\n        // Apply slow rotation for better visual effect\r\n        if (meshRef.current) {\r\n          meshRef.current.rotation.y += 0.001;\r\n        }\r\n\r\n        // Render scene with post-processing\r\n        if (composerRef.current) {\r\n          try {\r\n            composerRef.current.render();\r\n          } catch (renderError) {\r\n            console.error(\"Error during composer render:\", renderError);\r\n            // Fallback to direct renderer if composer fails\r\n            rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n          }\r\n        } else {\r\n          // Fallback to direct rendering if composer not available\r\n          rendererRef.current.render(sceneRef.current, cameraRef.current);\r\n        }\r\n\r\n        // Update last frame time\r\n        lastFrameTimeRef.current = currentTime;\r\n      } catch (error) {\r\n        console.error(\"Error in animation loop:\", error);\r\n      }\r\n    };\r\n\r\n    // Start animation loop\r\n    animationFrameRef.current = requestAnimationFrame(animate);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n        animationFrameRef.current = null;\r\n      }\r\n    };\r\n  }, [\r\n    mousePosition,\r\n    audioData,\r\n    isListening,\r\n    quality,\r\n    smoothnessLevel,\r\n    spikeLevel,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      aria-label=\"3D Audio Visualizer\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        overflow: \"hidden\",\r\n        backgroundColor: colorToCssString(canvasColor),\r\n        position: \"relative\",\r\n        ...containerStyle,\r\n      }}\r\n      className={className}\r\n    ></div>\r\n  );\r\n};\r\n","/**\r\n * Vertex shader for the audio visualizer\r\n * Implements Perlin noise-based displacement that reacts to audio frequencies\r\n */\r\nconst vertexShader = `\r\n// Simplified noise function based on simplex noise\r\n// Much more efficient than full Perlin noise implementation\r\nuniform float u_time;\r\n\r\nvec3 mod289(vec3 x)\r\n    {\r\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n    }\r\n\r\nvec4 mod289(vec4 x)\r\n    {\r\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n    }\r\n\r\nvec4 permute(vec4 x)\r\n    {\r\n        return mod289(((x*34.0)+10.0)*x);\r\n    }\r\n\r\nvec4 taylorInvSqrt(vec4 r)\r\n    {\r\n        return 1.79284291400159 - 0.85373472095314 * r;\r\n    }\r\n\r\nvec3 fade(vec3 t) {\r\n        return t*t*t*(t*(t*6.0-15.0)+10.0);\r\n    }\r\n\r\n// Classic Perlin noise, periodic variant\r\nfloat pnoise(vec3 P, vec3 rep)\r\n    {\r\n        vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\r\n        vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\r\n        Pi0 = mod289(Pi0);\r\n        Pi1 = mod289(Pi1);\r\n        vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n        vec4 iz0 = Pi0.zzzz;\r\n        vec4 iz1 = Pi1.zzzz;\r\n\r\n        vec4 ixy = permute(permute(ix) + iy);\r\n        vec4 ixy0 = permute(ixy + iz0);\r\n        vec4 ixy1 = permute(ixy + iz1);\r\n\r\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\r\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n        gx0 = fract(gx0);\r\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n        vec4 sz0 = step(gz0, vec4(0.0));\r\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\r\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n        gx1 = fract(gx1);\r\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n        vec4 sz1 = step(gz1, vec4(0.0));\r\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n        g000 *= norm0.x;\r\n        g010 *= norm0.y;\r\n        g100 *= norm0.z;\r\n        g110 *= norm0.w;\r\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n        g001 *= norm1.x;\r\n        g011 *= norm1.y;\r\n        g101 *= norm1.z;\r\n        g111 *= norm1.w;\r\n\r\n        float n000 = dot(g000, Pf0);\r\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n        float n111 = dot(g111, Pf1);\r\n\r\n        vec3 fade_xyz = fade(Pf0);\r\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n        return 2.2 * n_xyz;\r\n    }\r\n\r\n// Uniforms\r\nuniform float u_amplitude;\r\nuniform float u_bass;\r\nuniform float u_mid;\r\nuniform float u_treble;\r\nuniform float u_detail;\r\n\r\n// Varying variables to pass to fragment shader\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n  // Calculate noise based on position and time\r\n  // Use u_detail to control level of detail (lower = better performance)\r\n  float noise = 3.0 * pnoise(position + u_time, vec3(10.0));\r\n  \r\n  // Calculate displacement based on audio frequencies\r\n  float bassDisplacement = u_bass * noise * 0.5;\r\n  float midDisplacement = u_mid * noise * 0.3;\r\n  float trebleDisplacement = u_treble * noise * 0.2;\r\n  \r\n  // Combine displacements with amplitude control\r\n  float displacement = u_amplitude * (bassDisplacement + midDisplacement + trebleDisplacement) * (noise / 10.);\r\n  \r\n  // Apply displacement along normal direction\r\n  vec3 newPosition = position + normal * displacement;\r\n  \r\n  // Pass normal to fragment shader\r\n  vNormal = normal;\r\n  \r\n  // Set final position\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\r\n}\r\n`;\r\n\r\nexport default vertexShader;\r\n","/**\r\n * Fragment shader for the audio visualizer\r\n * Handles the coloring of the visualization\r\n */\r\nconst fragmentShader = `\r\n// Color uniforms\r\nuniform float u_red;\r\nuniform float u_green;\r\nuniform float u_blue;\r\n\r\n// Varying variables received from vertex shader\r\nvarying vec3 vNormal;\r\n\r\nvoid main() {\r\n  // Apply color based on uniform values\r\n  gl_FragColor = vec4(vec3(u_red, u_green, u_blue), 1.0);\r\n}\r\n`;\r\n\r\nexport default fragmentShader;\r\n","import { useState, useEffect, useRef, useCallback } from \"react\";\r\n\r\n/**\r\n * Audio listener state interface\r\n */\r\nexport interface AudioListenerState {\r\n  /**\r\n   * Whether the visualizer is currently listening to audio\r\n   */\r\n  isListening: boolean;\r\n\r\n  /**\r\n   * Audio frequency data array\r\n   */\r\n  audioData: Uint8Array | null;\r\n\r\n  /**\r\n   * Error message if microphone access fails\r\n   */\r\n  error: string | null;\r\n\r\n  /**\r\n   * Function to start listening to audio\r\n   */\r\n  startListening: () => void;\r\n\r\n  /**\r\n   * Function to stop listening to audio\r\n   */\r\n  stopListening: () => void;\r\n}\r\n\r\n/**\r\n * Custom hook for listening to audio from the microphone\r\n * @returns Audio listener state\r\n */\r\nexport const useAudioListener = (): AudioListenerState => {\r\n  const [isListening, setIsListening] = useState<boolean>(false);\r\n  const [audioData, setAudioData] = useState<Uint8Array | null>(() => {\r\n    // Initialize with placeholder data to ensure visualization starts immediately\r\n    const placeholderData = new Uint8Array(128);\r\n    for (let i = 0; i < placeholderData.length; i++) {\r\n      // Create a gentle wave pattern for initial visualization\r\n      placeholderData[i] = Math.floor(40 + 20 * Math.sin(i * 0.1));\r\n    }\r\n    return placeholderData;\r\n  });\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n  const analyserRef = useRef<AnalyserNode | null>(null);\r\n  const mediaStreamRef = useRef<MediaStream | null>(null);\r\n  const animationFrameRef = useRef<number | null>(null);\r\n  const dataArrayRef = useRef<Uint8Array | null>(null);\r\n\r\n  // Cleanup function to release resources\r\n  const cleanup = useCallback(() => {\r\n    if (animationFrameRef.current) {\r\n      cancelAnimationFrame(animationFrameRef.current);\r\n      animationFrameRef.current = null;\r\n    }\r\n\r\n    if (mediaStreamRef.current) {\r\n      mediaStreamRef.current\r\n        .getTracks()\r\n        .forEach((track: MediaStreamTrack) => track.stop());\r\n      mediaStreamRef.current = null;\r\n    }\r\n\r\n    if (audioContextRef.current && audioContextRef.current.state !== \"closed\") {\r\n      audioContextRef.current.close().catch(console.error);\r\n      audioContextRef.current = null;\r\n    }\r\n\r\n    analyserRef.current = null;\r\n    dataArrayRef.current = null;\r\n  }, []);\r\n\r\n  // Clean up resources when component unmounts\r\n  useEffect(() => {\r\n    // Ensure browser supports audio APIs before even attempting to use them\r\n    const browserSupported =\r\n      typeof window !== \"undefined\" &&\r\n      (typeof window.AudioContext !== \"undefined\" ||\r\n        typeof (window as any).webkitAudioContext !== \"undefined\") &&\r\n      navigator.mediaDevices &&\r\n      navigator.mediaDevices.getUserMedia;\r\n\r\n    if (!browserSupported) {\r\n      setError(\"Your browser does not support the required audio APIs\");\r\n    }\r\n\r\n    return cleanup;\r\n  }, [cleanup]);\r\n\r\n  /**\r\n   * Start listening to audio from the microphone\r\n   */\r\n  const startListening = useCallback(async (): Promise<void> => {\r\n    try {\r\n      // First clean up any existing resources\r\n      cleanup();\r\n      setError(null);\r\n\r\n      // Check if browser supports AudioContext\r\n      if (\r\n        typeof window === \"undefined\" ||\r\n        (typeof window.AudioContext === \"undefined\" &&\r\n          typeof (window as any).webkitAudioContext === \"undefined\")\r\n      ) {\r\n        throw new Error(\"Your browser does not support Web Audio API\");\r\n      }\r\n\r\n      // Check if mediaDevices API is available\r\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n        throw new Error(\"Media Devices API not supported in this browser\");\r\n      }\r\n\r\n      // Request microphone access\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaStreamRef.current = stream;\r\n\r\n      // Create audio context\r\n      const AudioContextClass =\r\n        window.AudioContext || (window as any).webkitAudioContext;\r\n      const audioContext = new AudioContextClass();\r\n      audioContextRef.current = audioContext;\r\n\r\n      // Resume audio context if it's suspended (needed for some browsers)\r\n      if (audioContext.state === \"suspended\") {\r\n        await audioContext.resume();\r\n      }\r\n\r\n      // Create analyser node with optimized settings\r\n      const analyser = audioContext.createAnalyser();\r\n      analyser.fftSize = 512; // Balanced value for performance and detail\r\n      analyser.smoothingTimeConstant = 0.7; // Slightly reduced for more responsive visualization\r\n      analyser.minDecibels = -90; // Increased sensitivity to quiet sounds\r\n      analyser.maxDecibels = -10; // Better dynamic range\r\n      analyserRef.current = analyser;\r\n\r\n      // Connect the microphone to the analyser\r\n      const source = audioContext.createMediaStreamSource(stream);\r\n      source.connect(analyser);\r\n\r\n      // Create data array for frequency data\r\n      const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n      dataArrayRef.current = dataArray;\r\n\r\n      // Initialize with some data to ensure visualization starts immediately\r\n      analyser.getByteFrequencyData(dataArray);\r\n      setAudioData(new Uint8Array(dataArray));\r\n\r\n      // Function to update audio data in animation frame\r\n      const updateAudioData = (): void => {\r\n        if (!analyserRef.current || !dataArrayRef.current) return;\r\n\r\n        try {\r\n          // Get frequency data from the analyser\r\n          analyserRef.current.getByteFrequencyData(dataArrayRef.current);\r\n\r\n          // Create a copy of the data array to avoid reference issues\r\n          const newData = new Uint8Array(dataArrayRef.current);\r\n          setAudioData(newData);\r\n\r\n          // Continue the animation loop\r\n          animationFrameRef.current = requestAnimationFrame(updateAudioData);\r\n        } catch (err) {\r\n          console.error(\"Error updating audio data:\", err);\r\n          // If there's an error, stop the animation frame but don't stop listening\r\n          // This prevents complete failure if there's a temporary glitch\r\n          if (animationFrameRef.current) {\r\n            cancelAnimationFrame(animationFrameRef.current);\r\n            // Try to restart the animation frame after a short delay\r\n            setTimeout(() => {\r\n              animationFrameRef.current =\r\n                requestAnimationFrame(updateAudioData);\r\n            }, 100);\r\n          }\r\n        }\r\n      };\r\n\r\n      // Start animation frame loop immediately\r\n      animationFrameRef.current = requestAnimationFrame(updateAudioData);\r\n      setIsListening(true);\r\n    } catch (err) {\r\n      cleanup();\r\n      const errorMessage =\r\n        err instanceof Error ? err.message : \"Failed to access microphone\";\r\n      setError(errorMessage);\r\n      console.error(\"Error accessing microphone:\", err);\r\n    }\r\n  }, [cleanup]);\r\n\r\n  /**\r\n   * Stop listening to audio from the microphone\r\n   */\r\n  const stopListening = useCallback((): void => {\r\n    cleanup();\r\n    setIsListening(false);\r\n\r\n    // Generate new placeholder data when stopping\r\n    const placeholderData = new Uint8Array(128);\r\n    for (let i = 0; i < placeholderData.length; i++) {\r\n      // Create a gentle wave pattern for idle visualization\r\n      placeholderData[i] = Math.floor(30 + 15 * Math.sin(i * 0.1));\r\n    }\r\n    setAudioData(placeholderData);\r\n  }, [cleanup]);\r\n\r\n  return {\r\n    isListening,\r\n    audioData,\r\n    error,\r\n    startListening,\r\n    stopListening,\r\n  };\r\n};\r\n"],"names":["audioData","isListening","initialQuality","orbColors","canvasColor","initialGlow","enableOrbitControls","autoRotate","showGui","guiPositionTop","inertiaEnabled","inertiaLevel","zoomEnabled","spikeLevel","smoothnessLevel","className","containerStyle","containerRef","useRef","rendererRef","meshRef","sceneRef","cameraRef","clockRef","composerRef","bloomPassRef","guiRef","animationFrameRef","lastFrameTimeRef","mousePosition","setMousePosition","useState","x","y","quality","setQuality","deviceCapabilities","useMemo","window","isMobile","isLowEndDevice","test","navigator","userAgent","hardwareConcurrency","parseColor","color","THREE","Color","r","g","b","useEffect","getDetailLevel","qualitySetting","uniformsRef","u_time","value","u_amplitude","u_bass","u_mid","u_treble","u_red","red","u_green","green","u_blue","blue","u_detail","bloomParamsRef","threshold","strength","radius","current","scene","Scene","background","clock","Clock","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","lookAt","renderer","WebGLRenderer","antialias","alpha","powerPreference","precision","setSize","getOptimalPixelRatio","baseRatio","devicePixelRatio","Math","min","setPixelRatio","setClearColor","getHex","outputColorSpace","SRGBColorSpace","firstChild","removeChild","appendChild","domElement","controls","OrbitControls","enableDamping","dampingFactor","enableZoom","update","error","material","ShaderMaterial","vertexShader","fragmentShader","wireframe","uniforms","subdivisions","getSubdivisions","geometry","IcosahedronGeometry","index","needsUpdate","attributes","normal","mesh","Mesh","add","renderScene","RenderPass","bloomPass","UnrealBloomPass","Vector2","outputPass","OutputPass","composer","EffectComposer","addPass","gui","GUI","style","top","right","colorFolder","addFolder","name","bloomFolder","onChange","handleResize","width","height","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","dispose","destroy","handleMouseMove","e","windowHalfX","innerWidth","windowHalfY","innerHeight","clientX","clientY","frameInterval","getTargetFPS","animate","requestAnimationFrame","currentTime","performance","now","getElapsedTime","length","bufferLength","sampleStep","max","floor","bassEnd","bassSum","i","bassAvg","ceil","midStart","midEnd","midSum","midAvg","trebleStart","trebleSum","trebleAvg","avgVolume","time","sin","rotation","render","renderError","_jsx","ref","overflow","backgroundColor","toString","padStart","startsWith","setIsListening","setAudioData","placeholderData","Uint8Array","setError","audioContextRef","analyserRef","mediaStreamRef","dataArrayRef","cleanup","useCallback","getTracks","forEach","track","stop","state","close","catch","console","AudioContext","webkitAudioContext","mediaDevices","getUserMedia","startListening","async","Error","stream","audio","audioContext","resume","analyser","createAnalyser","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","createMediaStreamSource","connect","dataArray","frequencyBinCount","getByteFrequencyData","updateAudioData","newData","err","setTimeout","errorMessage","message","stopListening"],"mappings":"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"}